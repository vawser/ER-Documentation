#---------------------------------
# Syntax
#---------------------------------
Commands and conditions are prefixed with arg0, arg1, etc.

These are the entity objects that represent the 'enemy'.

For example:
 arg0:SetEnablePlatoonMove(true)
 
Applies its effect upon the main entity.

#------------------------------------------------------------------
# Commands
#------------------------------------------------------------------
#---------------------------------
# General Commands
#---------------------------------
# AddTopGoal( <goal>, <value>, <point>, <direction>, <value>, <target>, <bool> )
Add a top goal to the enemy.

# AddSubGoal( <goal>, <value>, <anim id>, <target>, <value>, <dir type>, <value> )
Add a sub goal to the current order for the enemy.

# ClearSubGoal()
Clear a sub goal from the current order.

# Replaning()
Execute replanning.

# SetStringIndexedNumber( <string>, <value> )
Set variable strings to a value.

# SetNumber( <key>, <value> )
Set a key-value.

# SetTimer( <key>, <duration> )
Set a timer.

# TimingSetNumber( <key>, <value>, <timing enum> )
Set the timing for a timer.

# StartDash()
Start dash?

# AddObserveSpecialEffectAttribute( <target>, <SpEffect> )
Add specified SpEffect to target.

# DeleteObserveSpecialEffectAttribute( <target>, <SpEffect> )
Delete specified SpEffect from target.

# AddObserveArea( <index>, <observe target>, <self target>, <direction enum>, <radius>, <radius> )
Add an observe area that triggers if the specified target enters.

# AddObserveAreaCustom( <index>, <observe target>, <self target>, <direction enum>, <radius>, <radius>, <height> )
Add an observe area that triggers if the specified target enters.

# DeleteObserve( <index> )
Delete observe area at specified index.

# SetAIFixedMoveTargetSpecifyAngle( <target>, <value>, <value>, <direction enum> )
Set fixed move target with specified angle.

# SetEnableUsePath( <bool> )
Set enable use path.

# SetLifeEndSuccess( <bool>
?

#---------------------------------
# Player NPC Commands
#---------------------------------
# AddNPCActProb( <npc act> )
Add specified NPC Act to the probailities list.

# ResetNPCActProb()
Reset NPC Act probabilities.

# ChangeEquipItem( <equip item id>, <slot type> )
Change equipped item.

#---------------------------------
# Platoon Commands
#---------------------------------
# SetEnablePlatoonMove( <bool> )
Enables platoon movement

# SetFormationType( <unk>, <unk> )
Set formation type
 
# SetFormationParam( <index>, <x>, <y> )    
Sets the platoon position of the enemy at the index [idx] based on the enemy at index [0]

Used to make the enemies walk in a specific formation

# SetBaseMoveRate( <index>, <float> )
Set the animation speed multiplier to a value for enemy at index [idx].

# SendCommandAll( <command enum> )
Send platoon command.

#---------------------------------
# Misc Commands
#---------------------------------
# DbgAutoRemo_ResetWaitCommand()
Reset wait command for cutscene?
 
#------------------------------------------------------------------
# Conditions
#------------------------------------------------------------------
#---------------------------------
# General Conditions
#---------------------------------
# IsSearchTarget( <target> )
Return true if target is current search target

# GetNpcThinkParamID()
Return Think ID in use

# IsInsideTarget( <target>, <dir>, <value> )
Return true if inside target

# IsInsideTargetRegion( <target>, <msb event id> )
Return true if target is in msb event region

# IsInsideTargetEx( <target>, <2nd target>, <dir>, <value>, <value> )
?

# IsTargetGuard( <target> )
Return true if target is guarding

# IsFinishTimer( <value> )
Return true if timer is finished

# IsBothHandMode( <target> )
Return true if target is two-handing weapon

# GetDist( <target> )
Return distance from target

# GetRandam_Int( <min>, <max> )
Return random integer between min and max

# GetRandam_Float( <min>, <max> )
Return random float between min and max

# GetHpRate( <target> )
Return HP decimal of specified target.

# GetMp( <target> )
Return FP of specified target.

# GetSp( <target> )
Return stamina of specified target.

# GetExcelParam( <param> )
Return param field

# GetEventRequest()
Return event request ID

# IsEventFlag( <flag> )
Return true if event flag is set ON

# GetNumber( <key> )
Return the value for the specified key.

# IsChangeState()
Return true if in Change state.

# IsSearchHighState()
Return true if in Search High state.

# IsSearchLowState()
Return true if in Search Low state.

# IsCautionState()
Return true if in Caution state.

# IsFindState()
Return true if in Find state.

# IsBattleState()
Return true if in Battle state.

# IsMemoryState()
Return true if in Memory state.

# IsRiding( <target> )
Return true if target is riding mount.

# IsUseFlyRoute()
Return true if a fly route is used.

# GetTimer( <key> )
Return timer value.

# IsInterupt( <interrupt enum> )
Return true if Interrupt value is present.

# GetTeamRecordCount( <coordinate type>, <target>, <value> )
?

# GetAreaMinute()
Return current tile time: minute part.

# GetAreaHour()
Return current tile time: hour part.

# GetMapHitRadius( <target> )
Return map hit radius for target.

# GetToTargetAngle( <target> )
Return 'get to target' angle for current entity against specified target.

# GetAttackPassedTime( <anim> )
Return attack passed time for specified anim.

# RegistAttackTimeInterval( <anim>, <cool time> )
Return registered cool time interval for specified anim.

# GetSubGoalNum()
Return sub goal number.

# GetCurrTargetType()
Return current target type.

# GetPrevTargetState()
Return previous target state.

# GetBehaviorStateId( <plan index enum )
Return behavior state id.

# GetSpecialEffectActivateInterruptId( <SpEffect> )
Return interrupt id for specified SpEffect.

# GetExistMeshOnLineDistSpecifyAngle( <target>, <angle>, <angle>, <direction enum> )
Return line distance from line trace from target's initial angle and specified angle.

# CheckDoesExistPath( <target>, <direction, <value> )
Return true if target is hit by line trace.

# HasSpecialEffectId( <target>, <speffect id> )
Return true if target has specified speffect

# HasSpecialEffectCategory( <target>, <cateogry> )
Return true if target has SpEffect with specified category.

# HasSpecialEffectAttribute( <target>, <attribute> )
Return true if target has SpEffect with specified attribute.

#---------------------------------
# Player NPC Conditions
#---------------------------------
# GetNPCActProb( <npc act> )
Return probability for specified NPC act.

# GetEquipWeaponIndex( <arm> )
Return the equip weapon index for the specified arm.

# GetCurrentEquipWeaponId( <target>, <arm> )
Return the current equip weapon id for the specified target and the specified arm.

# GetEquipWeaponId( <target>, <arm>, <equip slot> )
Return the equip weapon id in the specified arm for the specified equip slot.

# GetWeaponBehaviorVarID( <equip weapon id> )
Return weapon behavior variation id.

# GetWeightType( <target> )
Return weight type.

# GetSpellType( <>, <>, <equip magic id> )
Return spell type based on equip magic id.

# GetEquipMagicId( <target>, <slot> )
Return equip magic id for specified target in the specified slot.

# CanShootMagicByType( <>, <magic category> )
Return true if magic type can be used.

# GetMagicCategory( <magic id> )
Return magic cateogry for X.

# GetAIUsageParam( <>, <magic id> )
Return ai usage param for specified magic id.

# CanWeaponEnhance( <equip weapon id>, <arm> )
Return true if specified equipped weapon in specified arm can be enhanced.

# GetEquipItemId( <target>, <slot>, <slot type> )
Return equipped item id for specified target in specified slot/slot type.

#---------------------------------
# Platoon Conditions
#---------------------------------
# IsValidPlatoon()
Return true if entity belongs to a valid platoon.

# GetMemberAI( <index> )
Return entity as specified index.

# GetMemberNum()
Return number of members in platoon.

# GetTeamDefeatEntityId()
Return team defeat entity id.

# IsExistTargetTeamDefeat()
Return true if team defeat target exists.

# GetPlatoonCommand()
Return current platoon command.

# GetCommandNo()
Return current platoon command number.

#---------------------------------
# Misc Conditions
#---------------------------------
# DbgAutoRemo_IsWaitCommand
Is wait command for cutscene?

#------------------------------------------------------------------
# References
#------------------------------------------------------------------
<target>:
 TARGET_NONE = -2
 TARGET_SELF = -1
 TARGET_ENE_0 = 0
 TARGET_FRI_0 = 10
 TARGET_EVENT = 20
 TARGET_LOCALPLAYER = 21
 TARGET_LowHp_Friend = 22
 TARGET_INTERMEDIATE_POINT = 23
 TARGET_TEAM_FORMATION = 24
 TARGET_TEAM_LEADER = 25
 TARGET_MEMORIED_RELATIVE_TARGET = 26
 TARGET_ENEMY_AVATOR_HOME = 50
 TARGET_PERSONAL_AVATOR_HOME = 51
 TARGET_TYPE_BOIDS_COMMAND = 60
 
<string>:
 NPC_PointFrontWall
 Dist_Rolling
 Dist_BackStep
 AddDistWalk
 AddDistRun
 
<dir>:
 AI_DIR_TYPE_CENTER = 0
 AI_DIR_TYPE_F = 1
 AI_DIR_TYPE_B = 2
 AI_DIR_TYPE_L = 3
 AI_DIR_TYPE_R = 4
 AI_DIR_TYPE_ToF = 5
 AI_DIR_TYPE_ToB = 6
 AI_DIR_TYPE_ToL = 7
 AI_DIR_TYPE_ToR = 8
 AI_DIR_TYPE_Top = 9
 
#---------------------------------
# Note
#---------------------------------
Add new goals to goal_list.lua. This is required for the new AI to function.